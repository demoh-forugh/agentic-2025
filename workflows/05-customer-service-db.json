{
  "name": "05 - Customer Service with Database",
  "nodes": [
    {
      "parameters": {},
      "id": "manual-trigger-001",
      "name": "Manual Trigger",
      "type": "n8n-nodes-base.manualTrigger",
      "typeVersion": 1,
      "position": [250, 300],
      "notes": "TRIGGER: Manual start for customer service ticket processing"
    },
    {
      "parameters": {
        "operation": "executeQuery",
        "query": "SELECT id, customer_email, subject, message, priority, status, created_at\nFROM customer_tickets\nWHERE status = 'open'\nORDER BY created_at DESC\nLIMIT 10",
        "options": {}
      },
      "id": "postgres-fetch-tickets-001",
      "name": "Get Open Tickets",
      "type": "n8n-nodes-base.postgres",
      "typeVersion": 2,
      "position": [450, 300],
      "notes": "DATABASE QUERY: Fetches up to 10 open customer support tickets",
      "credentials": {
        "postgres": {
          "id": "1",
          "name": "Workshop PostgreSQL"
        }
      }
    },
    {
      "parameters": {
        "conditions": {
          "number": [
            {
              "value1": "={{ $json.length }}",
              "operation": "larger",
              "value2": 0
            }
          ]
        }
      },
      "id": "if-has-tickets-001",
      "name": "Has Tickets?",
      "type": "n8n-nodes-base.if",
      "typeVersion": 1,
      "position": [650, 300],
      "notes": "CONDITION: Checks if there are any tickets to process"
    },
    {
      "parameters": {
        "fieldToSplitOut": "=",
        "options": {}
      },
      "id": "split-tickets-001",
      "name": "Process Each Ticket",
      "type": "n8n-nodes-base.splitInBatches",
      "typeVersion": 3,
      "position": [850, 250],
      "notes": "DATA PROCESSING: Splits tickets to process each one individually"
    },
    {
      "parameters": {
        "model": "llama3.2:1b",
        "prompt": "=You are a customer service AI assistant. Analyze this support ticket and provide a JSON response.\n\nTicket Details:\n- ID: {{ $json.id }}\n- From: {{ $json.customer_email }}\n- Subject: {{ $json.subject }}\n- Message: {{ $json.message }}\n- Current Priority: {{ $json.priority }}\n- Status: {{ $json.status }}\n- Created: {{ $json.created_at }}\n\nProvide:\n1. sentiment_score: Float between -1.0 (very negative) and 1.0 (very positive)\n2. category: One of (technical, billing, feature_request, complaint, inquiry)\n3. suggested_priority: One of (low, medium, high, urgent)\n4. key_issues: Array of main problems identified\n5. suggested_response: A professional, empathetic response template\n6. estimated_resolution_time: Estimated time to resolve (in hours)\n7. requires_escalation: Boolean if needs manager attention",
        "options": {
          "temperature": 0.3,
          "responseFormat": "json"
        }
      },
      "id": "ollama-analyze-ticket-001",
      "name": "AI Analyzes Ticket",
      "type": "@n8n/n8n-nodes-langchain.lmChatOllama",
      "typeVersion": 1,
      "position": [1050, 250],
      "notes": "AI ANALYSIS: Analyzes ticket sentiment, categorizes, and suggests responses"
    },
    {
      "parameters": {
        "operation": "executeQuery",
        "query": "=UPDATE customer_tickets\nSET \n  category = '{{ $json.category }}',\n  sentiment_score = {{ $json.sentiment_score }},\n  priority = '{{ $json.suggested_priority }}',\n  updated_at = CURRENT_TIMESTAMP\nWHERE id = {{ $('Process Each Ticket').item.json.id }}\nRETURNING *",
        "options": {}
      },
      "id": "postgres-update-ticket-001",
      "name": "Update Ticket in DB",
      "type": "n8n-nodes-base.postgres",
      "typeVersion": 2,
      "position": [1250, 250],
      "notes": "DATABASE UPDATE: Updates ticket with AI analysis results",
      "credentials": {
        "postgres": {
          "id": "1",
          "name": "Workshop PostgreSQL"
        }
      }
    },
    {
      "parameters": {
        "operation": "insert",
        "schema": "public",
        "table": "customer_responses",
        "columns": {
          "mappings": [
            {
              "column": "ticket_id",
              "value": "={{ $('Process Each Ticket').item.json.id }}"
            },
            {
              "column": "response_text",
              "value": "={{ $('AI Analyzes Ticket').item.json.suggested_response }}"
            },
            {
              "column": "response_type",
              "value": "ai_generated"
            }
          ]
        },
        "options": {}
      },
      "id": "postgres-save-response-001",
      "name": "Save AI Response",
      "type": "n8n-nodes-base.postgres",
      "typeVersion": 2,
      "position": [1450, 250],
      "notes": "DATABASE INSERT: Saves AI-generated response template to database",
      "credentials": {
        "postgres": {
          "id": "1",
          "name": "Workshop PostgreSQL"
        }
      }
    },
    {
      "parameters": {
        "conditions": {
          "boolean": [
            {
              "value1": "={{ $('AI Analyzes Ticket').item.json.requires_escalation }}",
              "value2": true
            }
          ]
        }
      },
      "id": "if-escalate-001",
      "name": "Needs Escalation?",
      "type": "n8n-nodes-base.if",
      "typeVersion": 1,
      "position": [1650, 250],
      "notes": "CONDITION: Routes tickets that need manager attention"
    },
    {
      "parameters": {
        "operation": "sendEmail",
        "subject": "=ESCALATION: Ticket #{{ $('Process Each Ticket').item.json.id }} - {{ $('Process Each Ticket').item.json.subject }}",
        "message": "=URGENT TICKET ESCALATION\n\nTicket ID: {{ $('Process Each Ticket').item.json.id }}\nCustomer: {{ $('Process Each Ticket').item.json.customer_email }}\nSubject: {{ $('Process Each Ticket').item.json.subject }}\n\nAI Analysis:\n- Category: {{ $('AI Analyzes Ticket').item.json.category }}\n- Sentiment: {{ $('AI Analyzes Ticket').item.json.sentiment_score }}\n- Priority: {{ $('AI Analyzes Ticket').item.json.suggested_priority }}\n- Estimated Resolution: {{ $('AI Analyzes Ticket').item.json.estimated_resolution_time }} hours\n\nKey Issues:\n{{ $('AI Analyzes Ticket').item.json.key_issues.join('\\n- ') }}\n\nOriginal Message:\n{{ $('Process Each Ticket').item.json.message }}\n\nSuggested Response:\n{{ $('AI Analyzes Ticket').item.json.suggested_response }}\n\nPlease review and take action.",
        "options": {
          "ccEmails": "manager@example.com",
          "bccEmails": ""
        }
      },
      "id": "gmail-escalate-001",
      "name": "Email to Manager",
      "type": "n8n-nodes-base.gmail",
      "typeVersion": 2,
      "position": [1850, 150],
      "notes": "ESCALATION: Sends detailed email to manager for urgent tickets",
      "credentials": {
        "gmailOAuth2": {
          "id": "1",
          "name": "Google Workshop Account"
        }
      }
    },
    {
      "parameters": {
        "operation": "executeQuery",
        "query": "=-- Mark ticket for manager review\nUPDATE customer_tickets\nSET status = 'escalated'\nWHERE id = {{ $('Process Each Ticket').item.json.id }}\nRETURNING *",
        "options": {}
      },
      "id": "postgres-mark-escalated-001",
      "name": "Mark as Escalated",
      "type": "n8n-nodes-base.postgres",
      "typeVersion": 2,
      "position": [2050, 150],
      "notes": "DATABASE UPDATE: Marks ticket status as escalated",
      "credentials": {
        "postgres": {
          "id": "1",
          "name": "Workshop PostgreSQL"
        }
      }
    },
    {
      "parameters": {
        "mode": "aggregate",
        "aggregate": "aggregateAllItemData",
        "options": {}
      },
      "id": "aggregate-results-001",
      "name": "Aggregate All Results",
      "type": "n8n-nodes-base.aggregate",
      "typeVersion": 1,
      "position": [2250, 250],
      "notes": "DATA AGGREGATION: Combines all processed ticket results"
    },
    {
      "parameters": {
        "operation": "executeQuery",
        "query": "-- Get summary statistics\nSELECT \n  COUNT(*) as total_tickets,\n  COUNT(CASE WHEN status = 'open' THEN 1 END) as open_tickets,\n  COUNT(CASE WHEN status = 'escalated' THEN 1 END) as escalated_tickets,\n  AVG(sentiment_score) as avg_sentiment,\n  category,\n  COUNT(*) as count_by_category\nFROM customer_tickets\nGROUP BY category\nORDER BY count_by_category DESC",
        "options": {}
      },
      "id": "postgres-get-stats-001",
      "name": "Get Summary Stats",
      "type": "n8n-nodes-base.postgres",
      "typeVersion": 2,
      "position": [2450, 250],
      "notes": "REPORTING: Generates summary statistics of all ticket processing",
      "credentials": {
        "postgres": {
          "id": "1",
          "name": "Workshop PostgreSQL"
        }
      }
    }
  ],
  "connections": {
    "Manual Trigger": {
      "main": [
        [
          {
            "node": "Get Open Tickets",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Get Open Tickets": {
      "main": [
        [
          {
            "node": "Has Tickets?",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Has Tickets?": {
      "main": [
        [
          {
            "node": "Process Each Ticket",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Process Each Ticket": {
      "main": [
        [
          {
            "node": "AI Analyzes Ticket",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "AI Analyzes Ticket": {
      "main": [
        [
          {
            "node": "Update Ticket in DB",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Update Ticket in DB": {
      "main": [
        [
          {
            "node": "Save AI Response",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Save AI Response": {
      "main": [
        [
          {
            "node": "Needs Escalation?",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Needs Escalation?": {
      "main": [
        [
          {
            "node": "Email to Manager",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Aggregate All Results",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Email to Manager": {
      "main": [
        [
          {
            "node": "Mark as Escalated",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Mark as Escalated": {
      "main": [
        [
          {
            "node": "Aggregate All Results",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Aggregate All Results": {
      "main": [
        [
          {
            "node": "Get Summary Stats",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "active": false,
  "settings": {
    "executionOrder": "v1"
  },
  "versionId": "1",
  "id": "5",
  "meta": {
    "instanceId": "workshop-demo",
    "templateCredsSetupCompleted": true
  },
  "tags": [
    {
      "name": "workshop",
      "id": "1"
    },
    {
      "name": "database",
      "id": "5"
    },
    {
      "name": "customer-service",
      "id": "6"
    }
  ],
  "pinData": {}
}
