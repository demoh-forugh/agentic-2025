{
  "nodes": [
    {
      "parameters": {
        "pollTimes": {
          "item": [
            {
              "mode": "everyMinute"
            }
          ]
        },
        "simple": false,
        "filters": {},
        "options": {}
      },
      "type": "n8n-nodes-base.gmailTrigger",
      "typeVersion": 1.3,
      "position": [
        -16,
        320
      ],
      "id": "788e3bea-c738-4b33-af86-c83352819e78",
      "name": "Gmail Trigger",
      "credentials": {
        "gmailOAuth2": {
          "id": "XOyxuJhGWdzUw9G6",
          "name": "Gmail account"
        }
      }
    },
    {
      "parameters": {
        "content": "#### Using the Gmail Trigger and Ollama node, we can efficiently identify urgent emails through a simple prompt, ensuring transparent classification and improved email management.\n",
        "height": 448,
        "width": 336
      },
      "type": "n8n-nodes-base.stickyNote",
      "position": [
        -320,
        -16
      ],
      "typeVersion": 1,
      "id": "e39e6d9b-cf08-41b3-8353-8d75dfffc4fa",
      "name": "Sticky Note"
    },
    {
      "parameters": {
        "model": "mistral-small:22b-instruct-2409-q4_K_M",
        "options": {
          "temperature": 0.1,
          "topP": 0.9
        }
      },
      "type": "@n8n/n8n-nodes-langchain.lmOllama",
      "typeVersion": 1,
      "position": [
        432,
        624
      ],
      "id": "9c15b58f-2e8a-4abe-8c95-f3b4e251695e",
      "name": "Ollama Model",
      "credentials": {
        "ollamaApi": {
          "id": "S0lrtLdWQn9cyu09",
          "name": "Ollama account"
        }
      }
    },
    {
      "parameters": {
        "operation": "addLabels",
        "messageId": "={{ $('Select Data').item.json.id }}",
        "labelIds": [
          "Label_1755846026304996479"
        ]
      },
      "type": "n8n-nodes-base.gmail",
      "typeVersion": 2.1,
      "position": [
        1008,
        -192
      ],
      "id": "cd3a3643-bcf4-4477-919c-e6275924df36",
      "name": "Label Priority",
      "webhookId": "2559c2b5-6407-435b-845b-760a56cf990e",
      "credentials": {
        "gmailOAuth2": {
          "id": "XOyxuJhGWdzUw9G6",
          "name": "Gmail account"
        }
      }
    },
    {
      "parameters": {
        "operation": "addLabels",
        "messageId": "={{ $('Select Data').item.json.id }}",
        "labelIds": [
          "SPAM"
        ]
      },
      "type": "n8n-nodes-base.gmail",
      "typeVersion": 2.1,
      "position": [
        1008,
        32
      ],
      "id": "a625b5aa-f6a8-4e23-8687-13c585a80df8",
      "name": "Label SPAM",
      "webhookId": "2559c2b5-6407-435b-845b-760a56cf990e",
      "credentials": {
        "gmailOAuth2": {
          "id": "XOyxuJhGWdzUw9G6",
          "name": "Gmail account"
        }
      }
    },
    {
      "parameters": {
        "operation": "addLabels",
        "messageId": "={{ $('Select Data').item.json.id }}",
        "labelIds": [
          "Label_2910602766382903023"
        ]
      },
      "type": "n8n-nodes-base.gmail",
      "typeVersion": 2.1,
      "position": [
        1008,
        256
      ],
      "id": "1aaa010f-525b-48cc-bc31-1113fcb1c1df",
      "name": "Label Advertising",
      "webhookId": "2559c2b5-6407-435b-845b-760a56cf990e",
      "credentials": {
        "gmailOAuth2": {
          "id": "XOyxuJhGWdzUw9G6",
          "name": "Gmail account"
        }
      }
    },
    {
      "parameters": {
        "operation": "addLabels",
        "messageId": "={{ $('Select Data').item.json.id }}",
        "labelIds": [
          "Label_3691569425984283660"
        ]
      },
      "type": "n8n-nodes-base.gmail",
      "typeVersion": 2.1,
      "position": [
        1008,
        480
      ],
      "id": "277039f7-9966-4c1c-b1e9-342726e8e998",
      "name": "Label Entertainment",
      "webhookId": "2559c2b5-6407-435b-845b-760a56cf990e",
      "credentials": {
        "gmailOAuth2": {
          "id": "XOyxuJhGWdzUw9G6",
          "name": "Gmail account"
        }
      }
    },
    {
      "parameters": {
        "operation": "addLabels",
        "messageId": "={{ $('Select Data').item.json.id }}",
        "labelIds": [
          "Label_5591737268661049285"
        ]
      },
      "type": "n8n-nodes-base.gmail",
      "typeVersion": 2.1,
      "position": [
        1008,
        928
      ],
      "id": "61db31b6-d779-4556-8a81-b46760c7f873",
      "name": "Label Other",
      "webhookId": "2559c2b5-6407-435b-845b-760a56cf990e",
      "credentials": {
        "gmailOAuth2": {
          "id": "XOyxuJhGWdzUw9G6",
          "name": "Gmail account"
        }
      }
    },
    {
      "parameters": {
        "content": "## Models\n\n**üöÄ Llama 3.2 3B** - Lightning fast (80-100 tok/s)\n- Use for: Quick decisions, categorization, scoring\n- Response time: 1-2 seconds\n\n**üéØ Qwen 2.5 14B** - High accuracy (40-50 tok/s)\n- Use for: Complex analysis, drafts, reasoning\n- Response time: 3-5 seconds\n\n---\n\n## Model Routing by Workflow\n\n| Workflow              | Model        | Why                 | Demo Time              |\n|-----------------------|--------------|---------------------|------------------------|\n| 02 - Gmail Triage     | Llama 3.2 3B | Fast categorization | 8-10s for 5 emails     |\n| 03 - Calendar         | Qwen 2.5 14B | Reasoning needed    | 12-15s total           |\n| 04 - Document Gen     | Qwen 2.5 14B | Quality prose       | 15-25s (use streaming) |\n| 05 - Customer Service | Mixed        | Fast + accurate     | 30-40s for 3 tickets   |\n| 06 - Lead Scoring     | Qwen 2.5 14B | Nuanced analysis    | 12-15s per lead        |\n\n---\n\n## Quick Stats\n\n‚úÖ **Total VRAM:** 11GB / 16GB used\n‚úÖ **Models stay loaded:** Zero cold starts\n‚úÖ **Concurrent workflows:** Up to 8 simultaneous\n‚úÖ **GPU:** NVIDIA RTX PRO 4000 (16GB)\n\n---\n\n*Building Agents with n8n - Go to Agentic Conference 2025*\n",
        "height": 800,
        "width": 672,
        "color": 7
      },
      "type": "n8n-nodes-base.stickyNote",
      "position": [
        -32,
        528
      ],
      "typeVersion": 1,
      "id": "c8846ce1-87d4-4c85-84d0-019d7fe4f4aa",
      "name": "Sticky Note2"
    },
    {
      "parameters": {
        "promptType": "define",
        "text": "=From: {{ $('Select Data').item.json.from }}\n\nEmail body: {{ $('Select Data').item.json.text }}",
        "options": {
          "systemMessage": "=# Senior Executive Assistant Email Response Agent\n\n## Role\nYou are a senior executive assistant with an English teaching background. You craft professional, well-written email responses.\n\n## Task\nRead the provided email and sender information, then draft a response email addressing their questions, concerns, or requests.\n\n## Analysis Process\n\nQuickly assess:\n1. **Sender relationship**: Internal/external, seniority level, formality needed\n2. **Email purpose**: Information request, scheduling, decision, relationship building\n3. **Tone required**: Formal, moderate, or casual\n4. **Action items**: What specifically needs addressing?\n\n## Response Guidelines\n\n**Tone Calibration:**\n- **Formal** (executives, legal, first contact): No contractions, full titles, \"Sincerely\"\n- **Moderate** (business partners, clients): Professional but warm, \"Best regards\"\n- **Casual** (internal colleagues): Conversational, brief, \"Thanks\" or \"Best\"\n\n**Structure:**\n1. Greeting appropriate to relationship\n2. Acknowledge their specific points\n3. Address all questions/requests clearly\n4. State next steps if applicable\n5. Warm, appropriate closing\n6. Sign-off: \"Demoh Forugh\"\n\n**Quality Standards:**\n- Answer every question asked\n- Clear, concise, error-free\n- Professional yet human\n- Active voice preferred\n- Scannable paragraphs\n\n## Example Output\n\nPlease structure your email analysis and draft response in the following JSON format:\njson{\n  \"analysis\": {\n    \"senderContext\": {\n      \"relationshipLevel\": \"[description]\",\n      \"formalityRequirement\": \"[description]\",\n      \"powerDynamics\": \"[description]\",\n      \"communicationHistory\": \"[description]\"\n    },\n    \"messageCharacteristics\": {\n      \"urgency\": \"[description]\",\n      \"complexity\": \"[description]\",\n      \"emotionalTone\": \"[description]\",\n      \"purpose\": \"[description]\"\n    },\n    \"responseRequirements\": {\n      \"actionItems\": \"[description]\",\n      \"implicitNeeds\": \"[description]\",\n      \"politicalConsiderations\": \"[description]\",\n      \"followUpNeeds\": \"[description]\"\n    }\n  },\n  \"draftEmail\": {\n    \"subject\": \"[email subject line]\",\n    \"recipient\": \"[recipient first name]\",\n    \"body\": {\n      \"greeting\": \"[greeting text]\",\n      \"opening\": \"[opening paragraph]\",\n      \"mainPoints\": [\n        {\n          \"title\": \"[point title]\",\n          \"content\": \"[point content]\"\n        }\n      ],\n      \"closing\": \"[closing paragraph]\",\n      \"signature\": {\n        \"name\": \"[sender name]\",\n      }\n    }\n  }\n}\n\n\n## Important:\n\nAlways return valid JSON\nInclude all fields even if some are brief\nmainPoints should be an array with at least 1-3 items\nKeep descriptions concise but informative\n\n\nCRITICAL: JSON Output Requirements\nYou MUST output valid JSON. Follow these rules exactly:\n\nEvery property needs a comma after its value, EXCEPT the last property in an object\nCommon mistake to avoid:\n\njson‚ùå WRONG (missing comma after \"greeting\"):\n\"body\": {\n  \"greeting\": \"Dear Josh,\"\n  \"opening\": \"Thank you for...\"\n}\n\n‚úÖ CORRECT (comma added):\n\"body\": {\n  \"greeting\": \"Dear Josh,\",\n  \"opening\": \"Thank you for...\"\n}\n\nBefore outputting, verify:\n\nEvery \"key\": \"value\" has a comma after it (except last in object)\nEvery \"key\": {...} has a comma after the } (except last in object)\nEvery \"key\": [...] has a comma after the ] (except last in object)\n\n\nNo trailing commas:\n\njson‚úÖ CORRECT:\n{\n  \"name\": \"value\",\n  \"last\": \"no comma here\"\n}\n\n‚ùå WRONG:\n{\n  \"name\": \"value\",\n  \"last\": \"value\",  ‚Üê trailing comma\n}\n\nTest your JSON: Before outputting, mentally validate each line ends with either:\n\nA comma (if not the last property)\nOR just the closing character (if last property)\n\n\n---"
        }
      },
      "type": "@n8n/n8n-nodes-langchain.agent",
      "typeVersion": 2.2,
      "position": [
        1232,
        -192
      ],
      "id": "7c2d6817-89d4-4609-89f6-b40b5869ec6a",
      "name": "Reply Agent",
      "onError": "continueRegularOutput"
    },
    {
      "parameters": {
        "model": "mistral-small:22b-instruct-2409-q4_K_M",
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.lmChatOllama",
      "typeVersion": 1,
      "position": [
        1232,
        -32
      ],
      "id": "8441a470-2bca-4595-a70f-80db4416ae5f",
      "name": "Ollama Chat Model",
      "credentials": {
        "ollamaApi": {
          "id": "S0lrtLdWQn9cyu09",
          "name": "Ollama account"
        }
      }
    },
    {
      "parameters": {
        "content": "# Chat Models\n\n## üèÜ Flagship Tier: Maximum Capability\n\n**Mistral-Small 22B** - Professional quality (30-40 tok/s)\n- Size: 13 GB | 22B parameters | Q4_K_M quantization\n- Use for: Complex business analysis, professional documents, lead scoring\n- Response time: 3-7 seconds (quality worth the wait)\n- VRAM: ~14 GB when loaded\n\n## üéØ Accurate Tier: Balanced Performance\n\n**Qwen 2.5 14B** - High accuracy (45-55 tok/s)\n- Size: 9.0 GB | 14B parameters | Q4_K_M quantization\n- Use for: Complex analysis, drafts, reasoning, balanced workflows\n- Response time: 2-4 seconds\n- VRAM: ~9 GB when loaded\n\n## ‚ö° Fast Tier: Maximum Speed\n\n**Llama 3.2 3B** - Lightning fast (80-100 tok/s)\n- Size: 2.0 GB | 3B parameters | Q4_K_M quantization\n- Use for: Quick decisions, categorization, priority scoring\n- Response time: 1-2 seconds\n- VRAM: ~2.4 GB when loaded\n\n---\n\n## üî¨ Specialized Models Available\n\n**Mistral 7B** - Sentiment specialist (60-70 tok/s)\n- Size: 4.4 GB | **94% sentiment accuracy** (benchmarked)\n- Use for: Customer sentiment scoring, review analysis, tone detection\n- VRAM: ~4.7 GB when loaded\n\n**Mistral-Nemo 12B** - Extended context (45-55 tok/s)\n- Size: 7.1 GB | 128K token context window\n- Use for: Long document analysis, multi-email threads\n- VRAM: ~7.4 GB when loaded\n\n**Hermes 3 8B** - Function calling (55-65 tok/s)\n- Size: 4.7 GB | Optimized for tool use and structured JSON\n- VRAM: ~5.0 GB when loaded\n\n**Llama 3.2 1B** - Ultra-fast (100-130 tok/s)\n- Size: 1.3 GB | Maximum speed for binary classification\n- VRAM: ~1.5 GB when loaded\n\n---\n\n## Model Routing by Workflow\n\n| Workflow              | Standard Config       | Flagship Config       | Demo Time (Standard) | Demo Time (Flagship) |\n|-----------------------|-----------------------|-----------------------|----------------------|----------------------|\n| 02 - Gmail Triage     | Llama 3.2 3B          | Llama 3.2 3B          | 8-10s for 5 emails   | 8-10s for 5 emails   |\n| 03 - Calendar         | Qwen 2.5 14B          | Mistral-Small 22B     | 12-15s total         | 15-20s total         |\n| 04 - Document Gen     | Qwen 2.5 14B          | **Mistral-Small 22B** | 15-25s (streaming)   | 20-30s (streaming)   |\n| 05 - Customer Service | Mistral 7B + Llama 3B | Mistral-Small 22B     | 30-40s for 3 tickets | 35-45s for 3 tickets |\n| 06 - Lead Scoring     | Qwen 2.5 14B          | **Mistral-Small 22B** | 12-15s per lead      | 17-24s per lead      |\n\n**Bold** = Recommended for flagship capability showcaset",
        "height": 1440,
        "width": 1168,
        "color": 5
      },
      "type": "n8n-nodes-base.stickyNote",
      "position": [
        1648,
        976
      ],
      "typeVersion": 1,
      "id": "79e33776-7fd6-42ad-9f2f-8e658b3af86b",
      "name": "Sticky Note1"
    },
    {
      "parameters": {
        "resource": "draft",
        "subject": "={{ $('Select Data').item.json.subject }}",
        "emailType": "html",
        "message": "={{ $json.htmlBody }}",
        "options": {}
      },
      "type": "n8n-nodes-base.gmail",
      "typeVersion": 2.1,
      "position": [
        1776,
        -192
      ],
      "id": "23dd1301-938c-4e23-bc7b-0f361aeeead8",
      "name": "Create a draft",
      "webhookId": "deaac7bd-59e1-4b69-89ef-92ae3414c946",
      "credentials": {
        "gmailOAuth2": {
          "id": "XOyxuJhGWdzUw9G6",
          "name": "Gmail account"
        }
      }
    },
    {
      "parameters": {
        "language": "python",
        "pythonCode": "import json\nimport re\n\n# Get input data\nitems = _input.all()\ninput_data = items[0]['json']\n\nprint(\"=== Starting Python Processing ===\")\n\n# Extract the output field\nraw_output = input_data.get('output', input_data)\nprint(f\"Raw output type: {type(raw_output)}\")\n\ndef clean_json_string(text):\n    \"\"\"Aggressively clean and fix JSON string\"\"\"\n    if not isinstance(text, str):\n        return text\n    \n    print(\"Cleaning JSON string...\")\n    \n    # Remove markdown code fences\n    text = re.sub(r'^```json\\s*', '', text, flags=re.IGNORECASE)\n    text = re.sub(r'```\\s*$', '', text)\n    text = text.strip()\n    \n    # Remove any remaining backticks\n    text = text.replace('```', '')\n    \n    # Remove control characters\n    text = re.sub(r'[\\x00-\\x1F\\x7F-\\x9F]', '', text)\n    \n    print(f\"After basic cleaning, length: {len(text)}\")\n    print(f\"First 300 chars: {text[:300]}\")\n    \n    # Fix missing commas between properties (the main issue)\n    # Pattern: \"value\"\\n  \"nextKey\" should be \"value\",\\n  \"nextKey\"\n    text = re.sub(r'\"\\s*\\n\\s*\"', '\",\\n\"', text)\n    \n    # Fix missing commas after closing braces/brackets before next property\n    text = re.sub(r'(\\}|\\])\\s*\\n\\s*\"', r'\\1,\\n\"', text)\n    \n    # Remove trailing commas before closing braces/brackets\n    text = re.sub(r',(\\s*[}\\]])', r'\\1', text)\n    \n    # Fix multiple consecutive commas\n    text = re.sub(r',+', ',', text)\n    \n    print(f\"After fixes, length: {len(text)}\")\n    \n    return text\n\ndef parse_json_safely(raw_input):\n    \"\"\"Try multiple strategies to parse JSON\"\"\"\n    \n    print(\"=== Attempting JSON Parse ===\")\n    \n    # Strategy 1: Already an object\n    if isinstance(raw_input, dict):\n        print(\"Strategy 1: Input is already a dictionary\")\n        return raw_input\n    \n    # Strategy 2: Clean and parse\n    try:\n        print(\"Strategy 2: Clean and parse\")\n        cleaned = clean_json_string(raw_input)\n        parsed = json.loads(cleaned)\n        print(\"Strategy 2: SUCCESS\")\n        return parsed\n    except json.JSONDecodeError as e:\n        print(f\"Strategy 2 failed: {e}\")\n        print(f\"Error at line {e.lineno}, column {e.colno}\")\n        print(f\"Error message: {e.msg}\")\n        \n        # Show context around error\n        if isinstance(raw_input, str):\n            lines = clean_json_string(raw_input).split('\\n')\n            if e.lineno <= len(lines):\n                start = max(0, e.lineno - 3)\n                end = min(len(lines), e.lineno + 2)\n                print(\"Context around error:\")\n                for i in range(start, end):\n                    marker = \" >>> \" if i == e.lineno - 1 else \"     \"\n                    print(f\"{marker}Line {i+1}: {lines[i]}\")\n    \n    # Strategy 3: Extract JSON object and parse\n    try:\n        print(\"Strategy 3: Extract JSON and parse\")\n        cleaned = clean_json_string(raw_input)\n        \n        # Find first { and last }\n        first_brace = cleaned.find('{')\n        last_brace = cleaned.rfind('}')\n        \n        if first_brace >= 0 and last_brace > first_brace:\n            extracted = cleaned[first_brace:last_brace + 1]\n            print(f\"Extracted JSON length: {len(extracted)}\")\n            \n            # Apply fixes again\n            extracted = clean_json_string(extracted)\n            \n            parsed = json.loads(extracted)\n            print(\"Strategy 3: SUCCESS\")\n            return parsed\n    except Exception as e:\n        print(f\"Strategy 3 failed: {e}\")\n    \n    print(\"=== ALL PARSE STRATEGIES FAILED ===\")\n    return None\n\n# Parse the JSON\nparsed_data = parse_json_safely(raw_output)\n\n# Extract email data with safe fallbacks\ndraft_email = parsed_data.get('draftEmail', {}) if parsed_data else {}\nbody = draft_email.get('body', {})\nmain_points = body.get('mainPoints', [])\nif not isinstance(main_points, list):\n    main_points = []\nsignature = body.get('signature', {})\nanalysis = parsed_data.get('analysis', {}) if parsed_data else {}\n\nprint(\"=== Extracted Data ===\")\nprint(f\"Subject: {draft_email.get('subject', 'MISSING')}\")\nprint(f\"Recipient: {draft_email.get('recipient', 'MISSING')}\")\nprint(f\"Greeting: {body.get('greeting', 'MISSING')}\")\nprint(f\"Opening: {body.get('opening', 'MISSING')}\")\nprint(f\"Main points count: {len(main_points)}\")\nprint(f\"Closing: {body.get('closing', 'MISSING')}\")\nprint(f\"Signature name: {signature.get('name', 'MISSING')}\")\n\n# Build HTML email\ngreeting = body.get('greeting', 'Hello,')\nopening = body.get('opening', '')\nclosing = body.get('closing', '')\nsig_name = signature.get('name', 'Best regards')\nsig_title = signature.get('title', '')\n\n# Build main points HTML\nmain_points_html = ''\nif main_points:\n    points_html = []\n    for point in main_points:\n        title = point.get('title', '')\n        content = point.get('content', '')\n        points_html.append(f'''\n        <div class=\"point-item\">\n          <div class=\"point-title\">{title}</div>\n          <div class=\"point-content\">{content}</div>\n        </div>\n        ''')\n    main_points_html = '<div class=\"main-points\">' + ''.join(points_html) + '</div>'\n\n# Build signature HTML\nsig_title_html = f'<div class=\"signature-title\">{sig_title}</div>' if sig_title else ''\n\n# Complete HTML email\nhtml_email = f'''<!DOCTYPE html>\n<html>\n<head>\n  <meta charset=\"UTF-8\">\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n  <style>\n    body {{\n      font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', 'Roboto', 'Helvetica Neue', Arial, sans-serif;\n      line-height: 1.6;\n      color: #333333;\n      max-width: 600px;\n      margin: 0 auto;\n      padding: 20px;\n    }}\n    .email-container {{\n      background-color: #ffffff;\n    }}\n    .greeting {{\n      margin-bottom: 16px;\n      font-weight: 500;\n    }}\n    .opening {{\n      margin-bottom: 20px;\n    }}\n    .main-points {{\n      margin: 24px 0;\n    }}\n    .point-item {{\n      margin-bottom: 20px;\n      padding-left: 8px;\n      border-left: 3px solid #4285f4;\n    }}\n    .point-title {{\n      font-weight: 600;\n      color: #1a73e8;\n      margin-bottom: 6px;\n      font-size: 15px;\n    }}\n    .point-content {{\n      color: #555555;\n      margin-left: 0;\n    }}\n    .closing {{\n      margin-top: 24px;\n      margin-bottom: 24px;\n    }}\n    .signature {{\n      margin-top: 28px;\n      padding-top: 16px;\n      border-top: 1px solid #e0e0e0;\n    }}\n    .signature-name {{\n      font-weight: 600;\n      color: #202124;\n      margin-bottom: 4px;\n    }}\n    .signature-title {{\n      color: #5f6368;\n      font-size: 14px;\n    }}\n  </style>\n</head>\n<body>\n  <div class=\"email-container\">\n    <div class=\"greeting\">{greeting}</div>\n    <div class=\"opening\">{opening}</div>\n    {main_points_html}\n    <div class=\"closing\">{closing}</div>\n    <div class=\"signature\">\n      <div class=\"signature-name\">{sig_name}</div>\n      {sig_title_html}\n    </div>\n  </div>\n</body>\n</html>'''\n\n# Build plain text version\ntext_parts = [greeting, '\\n\\n', opening, '\\n\\n']\nfor i, point in enumerate(main_points):\n    text_parts.append(f\"{i + 1}. {point.get('title', '')}\\n\")\n    text_parts.append(f\"{point.get('content', '')}\\n\\n\")\ntext_parts.append(closing)\ntext_parts.append('\\n\\n')\ntext_parts.append(sig_name)\nif sig_title:\n    text_parts.append('\\n')\n    text_parts.append(sig_title)\n\ntext_body = ''.join(text_parts)\n\nprint(\"=== Output Generated ===\")\nprint(f\"HTML length: {len(html_email)}\")\nprint(f\"Text length: {len(text_body)}\")\nprint(f\"Parse success: {parsed_data is not None}\")\n\n# Return the result\nreturn {\n    'subject': draft_email.get('subject', 'Re: Your Message'),\n    'recipient': draft_email.get('recipient', ''),\n    'htmlBody': html_email,\n    'textBody': text_body,\n    'analysis': analysis,\n    'parseSuccess': parsed_data is not None\n}"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        1568,
        -192
      ],
      "id": "e5ae30bb-4150-4891-a9f1-f612f86600d9",
      "name": "Convert Response to HTML"
    },
    {
      "parameters": {
        "inputText": "=From: {{ $json.from }}\nSubject: {{ $json.subject }}\nBody: {{ $json.text }}",
        "categories": {
          "categories": [
            {
              "category": "Priority",
              "description": "Emails that are from an important person or should be responded to very quickly"
            },
            {
              "category": "SPAM",
              "description": "Emails that are from fake address or trying to trick me in to something"
            },
            {
              "category": "Advertising",
              "description": "Promotional, sales, and offer emails. "
            },
            {
              "category": "Entertainment",
              "description": "Humorous, silly, or entertaining emails."
            },
            {
              "category": "Mom",
              "description": "Things my mom sends me. "
            }
          ]
        },
        "options": {
          "multiClass": true,
          "fallback": "other",
          "enableAutoFixing": true
        }
      },
      "type": "@n8n/n8n-nodes-langchain.textClassifier",
      "typeVersion": 1.1,
      "position": [
        448,
        256
      ],
      "id": "82e85a05-4335-400e-9a06-94b7aecbbc89",
      "name": "Email Classifier"
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "f9766538-4670-453c-beb8-124300c39db4",
              "name": "id",
              "value": "={{ $json.id }}",
              "type": "string"
            },
            {
              "id": "497ae4e7-18f4-46d3-8c6a-9b4a04f2983e",
              "name": "threadId",
              "value": "={{ $json.threadId }}",
              "type": "string"
            },
            {
              "id": "b6669173-29a7-4081-a546-51b6229f6451",
              "name": "subject",
              "value": "={{ $json.subject }}",
              "type": "string"
            },
            {
              "id": "21c04169-5a8b-4f11-9fb9-4adcb3f35e86",
              "name": "from",
              "value": "={{ $json.from.value[0].address }}",
              "type": "string"
            },
            {
              "id": "a853796c-f412-48b2-a4bb-017957f6ca2b",
              "name": "text",
              "value": "={{ $json.text }}",
              "type": "string"
            },
            {
              "id": "b40a05a7-21db-4f46-a5fc-f650774f9c7a",
              "name": "labels",
              "value": "={{ $json.labelIds }}",
              "type": "array"
            },
            {
              "id": "38d3d962-07ca-45ce-80a5-8a0f3f7e7fd5",
              "name": "headers.date",
              "value": "={{ $json.headers.date }}",
              "type": "string"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        208,
        320
      ],
      "id": "1763d59d-7779-4bd4-8f39-7410eff41c46",
      "name": "Select Data"
    },
    {
      "parameters": {
        "workflowId": {
          "__rl": true,
          "value": "rcX9Sg1OpS1VDKHk",
          "mode": "list",
          "cachedResultUrl": "/workflow/rcX9Sg1OpS1VDKHk",
          "cachedResultName": "Take Action"
        },
        "workflowInputs": {
          "mappingMode": "defineBelow",
          "value": {}
        },
        "options": {}
      },
      "type": "n8n-nodes-base.executeWorkflow",
      "typeVersion": 1.3,
      "position": [
        2288,
        240
      ],
      "id": "e27b4259-53ec-42aa-8eb9-cd169608ed18",
      "name": "Call 'Take Action'"
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "814a1f19-bd7d-4de5-8146-ce804dd7e4e8",
              "name": "notification",
              "value": "Priority Email!",
              "type": "string"
            },
            {
              "id": "d06d4ce8-90aa-4674-bf69-3f20d1e39335",
              "name": "from",
              "value": "person@important.com",
              "type": "string"
            },
            {
              "id": "c5f4ca3c-30d9-4c42-bbb0-06a24daa7c5c",
              "name": "subject",
              "value": "={{ $('Select Data').item.json.subject }}",
              "type": "string"
            },
            {
              "id": "22e6a132-ee71-4f9a-a65e-ae989c727c9c",
              "name": "text",
              "value": "={{ $('Select Data').item.json.text }}",
              "type": "string"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        2016,
        -192
      ],
      "id": "38198efd-b7b4-4f93-b440-65965904a62b",
      "name": "Edit Fields"
    },
    {
      "parameters": {
        "operation": "addLabels",
        "messageId": "={{ $('Select Data').item.json.id }}",
        "labelIds": [
          "Label_1934709030390939523"
        ]
      },
      "type": "n8n-nodes-base.gmail",
      "typeVersion": 2.1,
      "position": [
        1008,
        704
      ],
      "id": "09cf5e8f-3af3-4e73-bfc7-cb48f9f90b31",
      "name": "Mom",
      "webhookId": "2559c2b5-6407-435b-845b-760a56cf990e",
      "credentials": {
        "gmailOAuth2": {
          "id": "XOyxuJhGWdzUw9G6",
          "name": "Gmail account"
        }
      }
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "814a1f19-bd7d-4de5-8146-ce804dd7e4e8",
              "name": "notification",
              "value": "Listen to your mother!",
              "type": "string"
            },
            {
              "id": "4b202a6f-c9da-41c7-97ac-0bb1658ba65a",
              "name": "from",
              "value": "mom@mom.com",
              "type": "string"
            },
            {
              "id": "c5f4ca3c-30d9-4c42-bbb0-06a24daa7c5c",
              "name": "subject",
              "value": "={{ $('Select Data').item.json.subject }}",
              "type": "string"
            },
            {
              "id": "22e6a132-ee71-4f9a-a65e-ae989c727c9c",
              "name": "text",
              "value": "={{ $('Select Data').item.json.text }}",
              "type": "string"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        1968,
        688
      ],
      "id": "659046df-9bf4-4f31-b725-d00fbfe11249",
      "name": "Edit Fields1"
    }
  ],
  "connections": {
    "Gmail Trigger": {
      "main": [
        [
          {
            "node": "Select Data",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Ollama Model": {
      "ai_languageModel": [
        [
          {
            "node": "Email Classifier",
            "type": "ai_languageModel",
            "index": 0
          }
        ]
      ]
    },
    "Label Priority": {
      "main": [
        [
          {
            "node": "Reply Agent",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Reply Agent": {
      "main": [
        [
          {
            "node": "Convert Response to HTML",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Ollama Chat Model": {
      "ai_languageModel": [
        [
          {
            "node": "Reply Agent",
            "type": "ai_languageModel",
            "index": 0
          }
        ]
      ]
    },
    "Create a draft": {
      "main": [
        [
          {
            "node": "Edit Fields",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Convert Response to HTML": {
      "main": [
        [
          {
            "node": "Create a draft",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Email Classifier": {
      "main": [
        [
          {
            "node": "Label Priority",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Label SPAM",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Label Advertising",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Label Entertainment",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Mom",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Label Other",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Select Data": {
      "main": [
        [
          {
            "node": "Email Classifier",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Edit Fields": {
      "main": [
        [
          {
            "node": "Call 'Take Action'",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Mom": {
      "main": [
        [
          {
            "node": "Edit Fields1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Edit Fields1": {
      "main": [
        [
          {
            "node": "Call 'Take Action'",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "pinData": {},
  "meta": {
    "templateCredsSetupCompleted": true,
    "instanceId": "ad3cf64a89b82e40152a9aed678b6223d5bda8ac43ab8ba64992e6e4c68b5b6d"
  }
}